# 多阶段构建 - 构建阶段
FROM node:22-alpine AS builder

# 设置工作目录
WORKDIR /app

# 复制package.json和package-lock.json
COPY package*.json ./

# 安装依赖
RUN npm ci

# 复制源代码
COPY . .

# 定义构建时环境变量（可通过 --build-arg 传入）
ARG VITE_APP_ENV=production
ARG VITE_APP_TITLE=广告管理系统
ARG VITE_APP_VERSION=1.0.0
ARG VITE_APP_DEBUG=false
ARG VITE_APP_LOG_LEVEL=error
ARG VITE_API_BASE_URL=/api
ARG VITE_API_TIMEOUT=15000
ARG VITE_FEATURE_ADMIN=true
ARG VITE_FEATURE_ANALYTICS=true
ARG VITE_UPLOAD_MAX_SIZE=5242880
ARG VITE_PAGE_SIZE=20

# 将构建参数转换为环境变量
ENV NODE_ENV=$VITE_APP_ENV
ENV VITE_APP_ENV=$VITE_APP_ENV
ENV VITE_APP_TITLE=$VITE_APP_TITLE
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_APP_DEBUG=$VITE_APP_DEBUG
ENV VITE_APP_LOG_LEVEL=$VITE_APP_LOG_LEVEL
ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV VITE_API_TIMEOUT=$VITE_API_TIMEOUT
ENV VITE_FEATURE_ADMIN=$VITE_FEATURE_ADMIN
ENV VITE_FEATURE_ANALYTICS=$VITE_FEATURE_ANALYTICS
ENV VITE_UPLOAD_MAX_SIZE=$VITE_UPLOAD_MAX_SIZE
ENV VITE_PAGE_SIZE=$VITE_PAGE_SIZE

# 构建应用（环境变量会被打包到静态文件中）
RUN npm run build:prod

# 生产阶段 - 使用nginx提供纯静态文件
FROM nginx:alpine

# 复制构建产物到nginx目录
COPY --from=builder /app/dist /usr/share/nginx/html

# 使用简单的nginx配置，只提供静态文件
RUN echo 'server { \
    listen 80; \
    server_name _; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    # SPA路由支持 \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # 静态资源缓存 \
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ { \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
}' > /etc/nginx/conf.d/default.conf

# 暴露端口
EXPOSE 80

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]